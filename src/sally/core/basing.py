# -*- encoding: utf-8 -*-
"""
KARA
kara.core.basing module

Database support
"""
from keri.core import coring
from keri.db import dbing, subing
from keri.vc import proving


class CueBaser(dbing.LMDBer):
    """
    Noter stores Notifications generated by the agent that are
    intended to be read and dismissed by the controller of the agent.

    """
    TailDirPath = "kara/db"
    AltTailDirPath = ".kara/db"
    TempPrefix = "kara_db_"

    def __init__(self, name="cb", headDirPath=None, reopen=True, **kwa):
        """

        Parameters:
            headDirPath:
            perm:
            reopen:
            kwa:
        """
        self.snd = None

        self.iss = None
        self.rev = None

        self.recv = None
        self.revk = None

        self.ack = None

        super(CueBaser, self).__init__(name=name, headDirPath=headDirPath, reopen=reopen, **kwa)

    def reopen(self, **kwa):
        """

        :param kwa:
        :return:
        """
        super(CueBaser, self).reopen(**kwa)

        # Database of senders of the presentation or revocation messages
        self.snd = subing.CesrSuber(db=self, subkey='snd.', klas=coring.Prefixer)

        # presentations that are waiting for the credential to be received and parsed
        self.iss = subing.CesrSuber(db=self, subkey='iss.', klas=coring.Dater)
        # revocations that are waiting for the TEL event to be received and processed
        self.rev = subing.CesrSuber(db=self, subkey='rev.', klas=coring.Dater)

        # presentations with resolved credentials that need to be sent to the hook
        self.recv = proving.CrederSuber(db=self, subkey='recv')
        # revocations whose TEL rev event has been resolved that need to be sent to the hook
        self.revk = proving.CrederSuber(db=self, subkey='revk')

        # presentations that have been sent to the hook that need to be ack'ed
        self.ack = proving.CrederSuber(db=self, subkey='ack')

        return self.env
